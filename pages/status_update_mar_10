status update - march 10th
2020.03.10

It’s been quite some time since I’ve last posted here, and I’ve made significant progress on my [text editor](github.com/wooosh/oswald) and a few other projects.


# editor heritage & design
Oswald (my editor) is technically a fork of `kilo` (link), which is a simple editor in about 1,000 lines of C code. At this point, it shares very little code with kilo, because I’ve ported it to c++ and abstracted a lot away to make writing a full featured text editor easier.

I’ve made the decision to only support compile time plugins in c/c++ instead of using an embeddable language such as elisp or lua. There are several reasons for this:
- Maintaining a plugin interface to another language is time consuming and creates friction between the c++ and the other language due to having to convert types
- C/C++ is much faster than most embeddable languages both in terms of loading time and execution speed; Oswald should open with no perceptible delay
- C and C++ are mature languages with a decent stdlib and ecosystem, especially compared to lua or a custom purpose language (like vimscript)

The major downside to this is that it is slower to develop plugins due to compile times and they must be linked into the executable or linked in at runtime.

Most features are designed to be able to be implemented as plugins by inserting themselves into the event pipeline or registering a command which can be bound to a key. A side effect of using the event pipeline this way is that I can do near perfect damage tracking since I have a list of the changes from the event stream. This allows me to output only the parts of the UI that change on screen to the terminal, resulting in less flickering and lower latency, especially on slower SSH connections.

A highlighting pipeline will also be implemented, which allows multiple plugins to serve highlighting info, which is useful for plugins that handle syntax highlighting or provide visual cues such as [vim-sneak] (https://github.com/justinmk/vim-sneak).

# semantic highlighting & tree sitter
The regex based highlighting vim uses leave a lot to be desired. An example of this is how user defined types are not highlighted in C files. Semantic highlighting solves this issue by using a much more capable parser that generates a tree of the syntax to properly highlight the source code.

Oswald currently uses [tree-sitter](https://github.com/tree-sitter/tree-sitter) for semantic highlighting (and semantic movements soon) for several reasons:
- tree-sitter supports many languages
- It is less complex to use compared to LSP’s semantic highlighting
- Due to it using a parser that only parses changed text, it has extremely low latency, whereas language servers might use a slower method of handling syntax highlighting

However, it isn’t perfect. Since tree-sitter has a repo for every language it supports, it is a pain to include into a project. I ended up writing a build script to download a list of tree sitter languages and compile everything into a static library, as well as generating headers to expose what languages it supports. It would be nice to have a standardized tree sitter library that functioned similarly, instead of having to come up with some form of packaging yourself.

There are other slight annoyances such as having to use a query language at runtime to get more general token names used for highlighting instead of specific token types like `primitive-type` or `type-identifier`. An alternative to this would be compiling tables into the library to avoid having to load files at runtime or store large strings in the executable.

LSP is no longer a priority for me since tree-sitter covers highlighting, folding, and go to definition to some extent, but I do intend to implement it eventually since features like rename symbol greatly speed up refactoring.

# testing tuis
I wanted to test how my editor displayed in the terminal automatically, so I wrote a utility called [tui-puppet] (https://github.com/wooosh/tui-puppet) that emulates a xterm-like terminal using libvterm, and controls the terminal with a stream of commands like so:


```
keystream line <space> 1 <enter>
keystream line <space> 2 <enter>
keystream line <space> 3 <enter>
keystream line <space> 4 <enter>
keystream line <space> 5 <enter>
hash
keystream <ctrl-q>
```

To compare screen states, you use the `hash` command, which hashes the screen state and writes that hash to stdout. You can compare these hashes to see if the rendered output is the same after making changes to your tui program.

# du lies to you (kind of)
While working on my editor, I noticed that my executable sizes were changing without the source changing, ranging from 11mb to 200mb. I spent a day trying to figure out which part of my build system was causing that (could be static linking, gcc bug, LTO, etc), but it turns out the issue was how I was measuring the file:


```
$ du -h oswald-11mb oswald-57mb
11M oswald-11mb
57M oswald-57mb
$ diff oswald-11mb oswald-57mb
$ # according to diff, they are identical
```

As it turns out, `du` has an “apparent size” flag, which gives me the length of the file instead of how much disk space it is using:


```
$ du -h --apparent-size oswald-11mb oswald-57mb
11M oswald-11mb
11M oswald-57mb
```

# future status updates
I plan to do more frequent (weekly/monthly) status updates in the future hopefully.
